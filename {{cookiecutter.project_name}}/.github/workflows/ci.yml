name: CI pipeline
on: [push, pull_request] #Which triggers there are available?
jobs:
  test-job:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [ "3.10" ]
        {% raw %}
    container: python:${{ matrix.python-version }}-bullseye
        {% endraw %}
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_DB: django_db
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_pass
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - run: echo "Starting build"
      - run: apt update && apt install -y gcc libpq-dev libz-dev
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Install Poetry
        run: |
            curl -fsS -o get-poetry.py https://install.python-poetry.org
            python get-poetry.py -y
            echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Install dependencies
        run: poetry install --no-interaction
      - name: Run tests
        run: poetry run python manage.py test -v 3
        env:
          DJANGO_SETTINGS_MODULE: "{{cookiecutter.__project_slug}}.settings"
          DATABASE_URL: "postgresql://django_user:django_pass@postgres/django_db"
# Uncomment the following lines if deploying to heroku
#  deploy:
#    if: contains(fromJson('["refs/heads/master", "refs/heads/main"]'), github.ref)
#    needs: [ test-job ]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Check out repository code
#        uses: actions/checkout@v3
#      - name: Install Poetry
#        run: |
#          curl -fsS -o get-poetry.py https://install.python-poetry.org
#          python get-poetry.py -y
#          echo "$HOME/.local/bin" >> $GITHUB_PATH
#      - name: export to requirements.txt
#        run: poetry export -f requirements.txt --output requirements.txt # if you have source code sources, you'll need to add --without-hashes flag also
#      - name: Deploying to heroku
#        uses: akhileshns/heroku-deploy@v3.12.12
#        with:
#          heroku_email: "YOUR_HEROKU_EMAIL_HERE"
#          # https://help.heroku.com/PBGP6IDE/how-should-i-generate-an-api-key-that-allows-me-to-use-the-heroku-platform-api
#          # Note this YOUR_HEROKU_EMAIL_HERE token, if it's revoked follow the link above to generate a new token, update in repo settings and replace the email accordingly
  {% raw -%}
#          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
  {% endraw %}
#          Shiheroku_app_name: "{{cookiecutter.heroku_app_name}}"

# TODO: security, deploy to heroku on success on specific branches